'\" t
.\"     Title: VALGRIND
.\"    Author: [see the "Author" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 02/15/2011
.\"    Manual: Release 3.6.1
.\"    Source: Release 3.6.1
.\"  Language: English
.\"
.TH "VALGRIND" "1" "02/15/2011" "Release 3.6.1" "Release 3.6.1"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
valgrind \- a suite of tools for debugging and profiling programs
.SH "SYNOPSIS"
.HP \w'\fBvalgrind\fR\ 'u
\fBvalgrind\fR [\fIvalgrind\-options\fR] [\fByour\-program\fR] [\fIyour\-program\-options\fR]
.SH "DESCRIPTION"
.PP
\fBValgrind\fR
is a flexible program for debugging and profiling Linux executables\&. It consists of a core, which provides a synthetic CPU in software, and a series of debugging and profiling tools\&. The architecture is modular, so that new tools can be created easily and without disturbing the existing structure\&.
.PP
Some of the options described below work with all Valgrind tools, and some only work with a few or one\&. The section MEMCHECK OPTIONS and those below it describe tool\-specific options\&.
.PP
This manual page covers only basic usage and options\&. For more comprehensive information, please see the HTML documentation on your system:
$INSTALL/share/doc/valgrind/html/index\&.html, or online:
http://www\&.valgrind\&.org/docs/manual/index\&.html\&.
.SH "BASIC OPTIONS"
.PP
These options work with all tools\&.
.PP
\fB\-h \-\-help\fR
.RS 4
Show help for all options, both for the core and for the selected tool\&. If the option is repeated it is equivalent to giving
\fB\-\-help\-debug\fR\&.
.RE
.PP
\fB\-\-help\-debug\fR
.RS 4
Same as
\fB\-\-help\fR, but also lists debugging options which usually are only of use to Valgrind\*(Aqs developers\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Show the version number of the Valgrind core\&. Tools can have their own version numbers\&. There is a scheme in place to ensure that tools only execute when the core version is one they are known to work with\&. This was done to minimise the chances of strange problems arising from tool\-vs\-core version incompatibilities\&.
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
Run silently, and only print error messages\&. Useful if you are running regression tests or have some other automated test machinery\&.
.RE
.PP
\fB\-v\fR, \fB\-\-verbose\fR
.RS 4
Be more verbose\&. Gives extra information on various aspects of your program, such as: the shared objects loaded, the suppressions used, the progress of the instrumentation and execution engines, and warnings about unusual behaviour\&. Repeating the option increases the verbosity level\&.
.RE
.PP
\fB\-\-trace\-children=<yes|no> [default: no] \fR
.RS 4
When enabled, Valgrind will trace into sub\-processes initiated via the
\fIexec\fR
system call\&. This is necessary for multi\-process programs\&.
.sp
Note that Valgrind does trace into the child of a
\fIfork\fR
(it would be difficult not to, since
\fIfork\fR
makes an identical copy of a process), so this option is arguably badly named\&. However, most children of
\fIfork\fR
calls immediately call
\fIexec\fR
anyway\&.
.RE
.PP
\fB\-\-trace\-children\-skip=patt1,patt2 \fR
.RS 4
This option only has an effect when
\fB\-\-trace\-children=yes\fR
is specified\&. It allows for some children to be skipped\&. The option takes a comma separated list of patterns for the names of child executables that Valgrind should not trace into\&. Patterns may include the metacharacters
?
and
*, which have the usual meaning\&.
.sp
This can be useful for pruning uninteresting branches from a tree of processes being run on Valgrind\&. But you should be careful when using it\&. When Valgrind skips tracing into an executable, it doesn\*(Aqt just skip tracing that executable, it also skips tracing any of that executable\*(Aqs child processes\&. In other words, the flag doesn\*(Aqt merely cause tracing to stop at the specified executables \-\- it skips tracing of entire process subtrees rooted at any of the specified executables\&.
.RE
.PP
\fB\-\-child\-silent\-after\-fork=<yes|no> [default: no] \fR
.RS 4
When enabled, Valgrind will not show any debugging or logging output for the child process resulting from a
\fIfork\fR
call\&. This can make the output less confusing (although more misleading) when dealing with processes that create children\&. It is particularly useful in conjunction with
\fI\-\-trace\-children=\fR\&. Use of this option is also strongly recommended if you are requesting XML output (\fI\-\-xml=yes\fR), since otherwise the XML from child and parent may become mixed up, which usually makes it useless\&.
.RE
.PP
\fB\-\-track\-fds=<yes|no> [default: no] \fR
.RS 4
When enabled, Valgrind will print out a list of open file descriptors on exit\&. Along with each file descriptor is printed a stack backtrace of where the file was opened and any details relating to the file descriptor such as the file name or socket details\&.
.RE
.PP
\fB\-\-time\-stamp=<yes|no> [default: no] \fR
.RS 4
When enabled, each message is preceded with an indication of the elapsed wallclock time since startup, expressed as days, hours, minutes, seconds and milliseconds\&.
.RE
.PP
\fB\-\-log\-fd=<number> [default: 2, stderr] \fR
.RS 4
Specifies that Valgrind should send all of its messages to the specified file descriptor\&. The default, 2, is the standard error channel (stderr)\&. Note that this may interfere with the client\*(Aqs own use of stderr, as Valgrind\*(Aqs output will be interleaved with any output that the client sends to stderr\&.
.RE
.PP
\fB\-\-log\-file=<filename> \fR
.RS 4
Specifies that Valgrind should send all of its messages to the specified file\&. If the file name is empty, it causes an abort\&. There are three special format specifiers that can be used in the file name\&.
.sp
\fB%p\fR
is replaced with the current process ID\&. This is very useful for program that invoke multiple processes\&. WARNING: If you use
\fB\-\-trace\-children=yes\fR
and your program invokes multiple processes OR your program forks without calling exec afterwards, and you don\*(Aqt use this specifier (or the
\fB%q\fR
specifier below), the Valgrind output from all those processes will go into one file, possibly jumbled up, and possibly incomplete\&.
.sp
\fB%q{FOO}\fR
is replaced with the contents of the environment variable
\fIFOO\fR\&. If the
\fB{FOO}\fR
part is malformed, it causes an abort\&. This specifier is rarely needed, but very useful in certain circumstances (eg\&. when running MPI programs)\&. The idea is that you specify a variable which will be set differently for each process in the job, for example
BPROC_RANK
or whatever is applicable in your MPI setup\&. If the named environment variable is not set, it causes an abort\&. Note that in some shells, the
\fB{\fR
and
\fB}\fR
characters may need to be escaped with a backslash\&.
.sp
\fB%%\fR
is replaced with
\fB%\fR\&.
.sp
If an
\fB%\fR
is followed by any other character, it causes an abort\&.
.RE
.PP
\fB\-\-log\-socket=<ip\-address:port\-number> \fR
.RS 4
Specifies that Valgrind should send all of its messages to the specified port at the specified IP address\&. The port may be omitted, in which case port 1500 is used\&. If a connection cannot be made to the specified socket, Valgrind falls back to writing output to the standard error (stderr)\&. This option is intended to be used in conjunction with the
valgrind\-listener
program\&. For further details, see
the commentary
in the manual\&.
.RE
.SH "ERROR-RELATED OPTIONS"
.PP
These options are used by all tools that can report errors, e\&.g\&. Memcheck, but not Cachegrind\&.
.PP
\fB\-\-xml=<yes|no> [default: no] \fR
.RS 4
When enabled, the important parts of the output (e\&.g\&. tool error messages) will be in XML format rather than plain text\&. Furthermore, the XML output will be sent to a different output channel than the plain text output\&. Therefore, you also must use one of
\fB\-\-xml\-fd\fR,
\fB\-\-xml\-file\fR
or
\fB\-\-xml\-socket\fR
to specify where the XML is to be sent\&.
.sp
Less important messages will still be printed in plain text, but because the XML output and plain text output are sent to different output channels (the destination of the plain text output is still controlled by
\fB\-\-log\-fd\fR,
\fB\-\-log\-file\fR
and
\fB\-\-log\-socket\fR) this should not cause problems\&.
.sp
This option is aimed at making life easier for tools that consume Valgrind\*(Aqs output as input, such as GUI front ends\&. Currently this option works with Memcheck, Helgrind and Ptrcheck\&. The output format is specified in the file
docs/internals/xml\-output\-protocol4\&.txt
in the source tree for Valgrind 3\&.5\&.0 or later\&.
.sp
The recommended options for a GUI to pass, when requesting XML output, are:
\fB\-\-xml=yes\fR
to enable XML output,
\fB\-\-xml\-file\fR
to send the XML output to a (presumably GUI\-selected) file,
\fB\-\-log\-file\fR
to send the plain text output to a second GUI\-selected file,
\fB\-\-child\-silent\-after\-fork=yes\fR, and
\fB\-q\fR
to restrict the plain text output to critical error messages created by Valgrind itself\&. For example, failure to read a specified suppressions file counts as a critical error message\&. In this way, for a successful run the text output file will be empty\&. But if it isn\*(Aqt empty, then it will contain important information which the GUI user should be made aware of\&.
.RE
.PP
\fB\-\-xml\-fd=<number> [default: \-1, disabled] \fR
.RS 4
Specifies that Valgrind should send its XML output to the specified file descriptor\&. It must be used in conjunction with
\fB\-\-xml=yes\fR\&.
.RE
.PP
\fB\-\-xml\-file=<filename> \fR
.RS 4
Specifies that Valgrind should send its XML output to the specified file\&. It must be used in conjunction with
\fB\-\-xml=yes\fR\&. Any
\fB%p\fR
or
\fB%q\fR
sequences appearing in the filename are expanded in exactly the same way as they are for
\fB\-\-log\-file\fR\&. See the description of
\fB\-\-log\-file\fR
for details\&.
.RE
.PP
\fB\-\-xml\-socket=<ip\-address:port\-number> \fR
.RS 4
Specifies that Valgrind should send its XML output the specified port at the specified IP address\&. It must be used in conjunction with
\fB\-\-xml=yes\fR\&. The form of the argument is the same as that used by
\fB\-\-log\-socket\fR\&. See the description of
\fB\-\-log\-socket\fR
for further details\&.
.RE
.PP
\fB\-\-xml\-user\-comment=<string> \fR
.RS 4
Embeds an extra user comment string at the start of the XML output\&. Only works when
\fB\-\-xml=yes\fR
is specified; ignored otherwise\&.
.RE
.PP
\fB\-\-demangle=<yes|no> [default: yes] \fR
.RS 4
Enable/disable automatic demangling (decoding) of C++ names\&. Enabled by default\&. When enabled, Valgrind will attempt to translate encoded C++ names back to something approaching the original\&. The demangler handles symbols mangled by g++ versions 2\&.X, 3\&.X and 4\&.X\&.
.sp
An important fact about demangling is that function names mentioned in suppressions files should be in their mangled form\&. Valgrind does not demangle function names when searching for applicable suppressions, because to do otherwise would make suppression file contents dependent on the state of Valgrind\*(Aqs demangling machinery, and also slow down suppression matching\&.
.RE
.PP
\fB\-\-num\-callers=<number> [default: 12] \fR
.RS 4
Specifies the maximum number of entries shown in stack traces that identify program locations\&. Note that errors are commoned up using only the top four function locations (the place in the current function, and that of its three immediate callers)\&. So this doesn\*(Aqt affect the total number of errors reported\&.
.sp
The maximum value for this is 50\&. Note that higher settings will make Valgrind run a bit more slowly and take a bit more memory, but can be useful when working with programs with deeply\-nested call chains\&.
.RE
.PP
\fB\-\-error\-limit=<yes|no> [default: yes] \fR
.RS 4
When enabled, Valgrind stops reporting errors after 10,000,000 in total, or 1,000 different ones, have been seen\&. This is to stop the error tracking machinery from becoming a huge performance overhead in programs with many errors\&.
.RE
.PP
\fB\-\-error\-exitcode=<number> [default: 0] \fR
.RS 4
Specifies an alternative exit code to return if Valgrind reported any errors in the run\&. When set to the default value (zero), the return value from Valgrind will always be the return value of the process being simulated\&. When set to a nonzero value, that value is returned instead, if Valgrind detects any errors\&. This is useful for using Valgrind as part of an automated test suite, since it makes it easy to detect test cases for which Valgrind has reported errors, just by inspecting return codes\&.
.RE
.PP
\fB\-\-show\-below\-main=<yes|no> [default: no] \fR
.RS 4
By default, stack traces for errors do not show any functions that appear beneath
\fBmain\fR
because most of the time it\*(Aqs uninteresting C library stuff and/or gobbledygook\&. Alternatively, if
\fBmain\fR
is not present in the stack trace, stack traces will not show any functions below
\fBmain\fR\-like functions such as glibc\*(Aqs
\fB__libc_start_main\fR\&. Furthermore, if
\fBmain\fR\-like functions are present in the trace, they are normalised as
\fB(below main)\fR, in order to make the output more deterministic\&.
.sp
If this option is enabled, all stack trace entries will be shown and
\fBmain\fR\-like functions will not be normalised\&.
.RE
.PP
\fB\-\-fullpath\-after=<string> [default: don\*(Aqt show source paths] \fR
.RS 4
By default Valgrind only shows the filenames in stack traces, but not full paths to source files\&. When using Valgrind in large projects where the sources reside in multiple different directories, this can be inconvenient\&.
\fB\-\-fullpath\-after\fR
provides a flexible solution to this problem\&. When this option is present, the path to each source file is shown, with the following all\-important caveat: if
\fBstring\fR
is found in the path, then the path up to and including
\fBstring\fR
is omitted, else the path is shown unmodified\&. Note that
\fBstring\fR
is not required to be a prefix of the path\&.
.sp
For example, consider a file named
/home/janedoe/blah/src/foo/bar/xyzzy\&.c\&. Specifying
\fB\-\-fullpath\-after=/home/janedoe/blah/src/\fR
will cause Valgrind to show the name as
foo/bar/xyzzy\&.c\&.
.sp
Because the string is not required to be a prefix,
\fB\-\-fullpath\-after=src/\fR
will produce the same output\&. This is useful when the path contains arbitrary machine\-generated characters\&. For example, the path
/my/build/dir/C32A1B47/blah/src/foo/xyzzy
can be pruned to
foo/xyzzy
using
\fB\-\-fullpath\-after=/blah/src/\fR\&.
.sp
If you simply want to see the full path, just specify an empty string:
\fB\-\-fullpath\-after=\fR\&. This isn\*(Aqt a special case, merely a logical consequence of the above rules\&.
.sp
Finally, you can use
\fB\-\-fullpath\-after\fR
multiple times\&. Any appearance of it causes Valgrind to switch to producing full paths and applying the above filtering rule\&. Each produced path is compared against all the
\fB\-\-fullpath\-after\fR\-specified strings, in the order specified\&. The first string to match causes the path to be truncated as described above\&. If none match, the full path is shown\&. This facilitates chopping off prefixes when the sources are drawn from a number of unrelated directories\&.
.RE
.PP
\fB\-\-suppressions=<filename> [default: $PREFIX/lib/valgrind/default\&.supp] \fR
.RS 4
Specifies an extra file from which to read descriptions of errors to suppress\&. You may use up to 100 extra suppression files\&.
.RE
.PP
\fB\-\-gen\-suppressions=<yes|no|all> [default: no] \fR
.RS 4
When set to
\fIyes\fR, Valgrind will pause after every error shown and print the line:
.sp
.if n \{\
.RS 4
.\}
.nf
    \-\-\-\- Print suppression ? \-\-\- [Return/N/n/Y/y/C/c] \-\-\-\-
.fi
.if n \{\
.RE
.\}
.sp
The prompt\*(Aqs behaviour is the same as for the
\fB\-\-db\-attach\fR
option (see below)\&.
.sp
If you choose to, Valgrind will print out a suppression for this error\&. You can then cut and paste it into a suppression file if you don\*(Aqt want to hear about the error in the future\&.
.sp
When set to
\fIall\fR, Valgrind will print a suppression for every reported error, without querying the user\&.
.sp
This option is particularly useful with C++ programs, as it prints out the suppressions with mangled names, as required\&.
.sp
Note that the suppressions printed are as specific as possible\&. You may want to common up similar ones, by adding wildcards to function names, and by using frame\-level wildcards\&. The wildcarding facilities are powerful yet flexible, and with a bit of careful editing, you may be able to suppress a whole family of related errors with only a few suppressions\&.
.sp
Sometimes two different errors are suppressed by the same suppression, in which case Valgrind will output the suppression more than once, but you only need to have one copy in your suppression file (but having more than one won\*(Aqt cause problems)\&. Also, the suppression name is given as
<insert a suppression name here>; the name doesn\*(Aqt really matter, it\*(Aqs only used with the
\fB\-v\fR
option which prints out all used suppression records\&.
.RE
.PP
\fB\-\-db\-attach=<yes|no> [default: no] \fR
.RS 4
When enabled, Valgrind will pause after every error shown and print the line:
.sp
.if n \{\
.RS 4
.\}
.nf
    \-\-\-\- Attach to debugger ? \-\-\- [Return/N/n/Y/y/C/c] \-\-\-\-
.fi
.if n \{\
.RE
.\}
.sp
Pressing
\fIRet\fR, or
\fIN Ret\fR
or
\fIn Ret\fR, causes Valgrind not to start a debugger for this error\&.
.sp
Pressing
\fIY Ret\fR
or
\fIy Ret\fR
causes Valgrind to start a debugger for the program at this point\&. When you have finished with the debugger, quit from it, and the program will continue\&. Trying to continue from inside the debugger doesn\*(Aqt work\&.
.sp
\fIC Ret\fR
or
\fIc Ret\fR
causes Valgrind not to start a debugger, and not to ask again\&.
.RE
.PP
\fB\-\-db\-command=<command> [default: gdb \-nw %f %p] \fR
.RS 4
Specify the debugger to use with the
\fB\-\-db\-attach\fR
command\&. The default debugger is GDB\&. This option is a template that is expanded by Valgrind at runtime\&.
%f
is replaced with the executable\*(Aqs file name and
%p
is replaced by the process ID of the executable\&.
.sp
This specifies how Valgrind will invoke the debugger\&. By default it will use whatever GDB is detected at build time, which is usually
/usr/bin/gdb\&. Using this command, you can specify some alternative command to invoke the debugger you want to use\&.
.sp
The command string given can include one or instances of the
%p
and
%f
expansions\&. Each instance of
%p
expands to the PID of the process to be debugged and each instance of
%f
expands to the path to the executable for the process to be debugged\&.
.sp
Since
<command>
is likely to contain spaces, you will need to put this entire option in quotes to ensure it is correctly handled by the shell\&.
.RE
.PP
\fB\-\-input\-fd=<number> [default: 0, stdin] \fR
.RS 4
When using
\fB\-\-db\-attach=yes\fR
or
\fB\-\-gen\-suppressions=yes\fR, Valgrind will stop so as to read keyboard input from you when each error occurs\&. By default it reads from the standard input (stdin), which is problematic for programs which close stdin\&. This option allows you to specify an alternative file descriptor from which to read input\&.
.RE
.PP
\fB\-\-dsymutil=no|yes [no] \fR
.RS 4
This option is only relevant when running Valgrind on Mac OS X\&.
.sp
Mac OS X uses a deferred debug information (debuginfo) linking scheme\&. When object files containing debuginfo are linked into a
\&.dylib
or an executable, the debuginfo is not copied into the final file\&. Instead, the debuginfo must be linked manually by running
dsymutil, a system\-provided utility, on the executable or
\&.dylib\&. The resulting combined debuginfo is placed in a directory alongside the executable or
\&.dylib, but with the extension
\&.dSYM\&.
.sp
With
\fB\-\-dsymutil=no\fR, Valgrind will detect cases where the
\&.dSYM
directory is either missing, or is present but does not appear to match the associated executable or
\&.dylib, most likely because it is out of date\&. In these cases, Valgrind will print a warning message but take no further action\&.
.sp
With
\fB\-\-dsymutil=yes\fR, Valgrind will, in such cases, automatically run
dsymutil
as necessary to bring the debuginfo up to date\&. For all practical purposes, if you always use
\fB\-\-dsymutil=yes\fR, then there is never any need to run
dsymutil
manually or as part of your applications\*(Aqs build system, since Valgrind will run it as necessary\&.
.sp
Valgrind will not attempt to run
dsymutil
on any executable or library in
/usr/,
/bin/,
/sbin/,
/opt/,
/sw/,
/System/,
/Library/
or
/Applications/
since
dsymutil
will always fail in such situations\&. It fails both because the debuginfo for such pre\-installed system components is not available anywhere, and also because it would require write privileges in those directories\&.
.sp
Be careful when using
\fB\-\-dsymutil=yes\fR, since it will cause pre\-existing
\&.dSYM
directories to be silently deleted and re\-created\&. Also note that
dsymutil
is quite slow, sometimes excessively so\&.
.RE
.PP
\fB\-\-max\-stackframe=<number> [default: 2000000] \fR
.RS 4
The maximum size of a stack frame\&. If the stack pointer moves by more than this amount then Valgrind will assume that the program is switching to a different stack\&.
.sp
You may need to use this option if your program has large stack\-allocated arrays\&. Valgrind keeps track of your program\*(Aqs stack pointer\&. If it changes by more than the threshold amount, Valgrind assumes your program is switching to a different stack, and Memcheck behaves differently than it would for a stack pointer change smaller than the threshold\&. Usually this heuristic works well\&. However, if your program allocates large structures on the stack, this heuristic will be fooled, and Memcheck will subsequently report large numbers of invalid stack accesses\&. This option allows you to change the threshold to a different value\&.
.sp
You should only consider use of this option if Valgrind\*(Aqs debug output directs you to do so\&. In that case it will tell you the new threshold you should specify\&.
.sp
In general, allocating large structures on the stack is a bad idea, because you can easily run out of stack space, especially on systems with limited memory or which expect to support large numbers of threads each with a small stack, and also because the error checking performed by Memcheck is more effective for heap\-allocated data than for stack\-allocated data\&. If you have to use this option, you may wish to consider rewriting your code to allocate on the heap rather than on the stack\&.
.RE
.PP
\fB\-\-main\-stacksize=<number> [default: use current \*(Aqulimit\*(Aq value] \fR
.RS 4
Specifies the size of the main thread\*(Aqs stack\&.
.sp
To simplify its memory management, Valgrind reserves all required space for the main thread\*(Aqs stack at startup\&. That means it needs to know the required stack size at startup\&.
.sp
By default, Valgrind uses the current "ulimit" value for the stack size, or 16 MB, whichever is lower\&. In many cases this gives a stack size in the range 8 to 16 MB, which almost never overflows for most applications\&.
.sp
If you need a larger total stack size, use
\fB\-\-main\-stacksize\fR
to specify it\&. Only set it as high as you need, since reserving far more space than you need (that is, hundreds of megabytes more than you need) constrains Valgrind\*(Aqs memory allocators and may reduce the total amount of memory that Valgrind can use\&. This is only really of significance on 32\-bit machines\&.
.sp
On Linux, you may request a stack of size up to 2GB\&. Valgrind will stop with a diagnostic message if the stack cannot be allocated\&. On AIX5 the allowed stack size is restricted to 128MB\&.
.sp
\fB\-\-main\-stacksize\fR
only affects the stack size for the program\*(Aqs initial thread\&. It has no bearing on the size of thread stacks, as Valgrind does not allocate those\&.
.sp
You may need to use both
\fB\-\-main\-stacksize\fR
and
\fB\-\-max\-stackframe\fR
together\&. It is important to understand that
\fB\-\-main\-stacksize\fR
sets the maximum total stack size, whilst
\fB\-\-max\-stackframe\fR
specifies the largest size of any one stack frame\&. You will have to work out the
\fB\-\-main\-stacksize\fR
value for yourself (usually, if your applications segfaults)\&. But Valgrind will tell you the needed
\fB\-\-max\-stackframe\fR
size, if necessary\&.
.sp
As discussed further in the description of
\fB\-\-max\-stackframe\fR, a requirement for a large stack is a sign of potential portability problems\&. You are best advised to place all large data in heap\-allocated memory\&.
.RE
.SH "MALLOC()-RELATED OPTIONS"
.PP
For tools that use their own version of
malloc
(e\&.g\&. Memcheck and Massif), the following options apply\&.
.PP
\fB\-\-alignment=<number> [default: 8 or 16, depending on the platform] \fR
.RS 4
By default Valgrind\*(Aqs
\fBmalloc\fR,
\fBrealloc\fR, etc, return a block whose starting address is 8\-byte aligned or 16\-byte aligned (the value depends on the platform and matches the platform default)\&. This option allows you to specify a different alignment\&. The supplied value must be greater than or equal to the default, less than or equal to 4096, and must be a power of two\&.
.RE
.SH "UNCOMMON OPTIONS"
.PP
These options apply to all tools, as they affect certain obscure workings of the Valgrind core\&. Most people won\*(Aqt need to use these\&.
.PP
\fB\-\-smc\-check=<none|stack|all> [default: stack] \fR
.RS 4
This option controls Valgrind\*(Aqs detection of self\-modifying code\&. If no checking is done, if a program executes some code, then overwrites it with new code, and executes the new code, Valgrind will continue to execute the translations it made for the old code\&. This will likely lead to incorrect behaviour and/or crashes\&.
.sp
Valgrind has three levels of self\-modifying code detection: no detection, detect self\-modifying code on the stack (which is used by GCC to implement nested functions), or detect self\-modifying code everywhere\&. Note that the default option will catch the vast majority of cases\&. The main case it will not catch is programs such as JIT compilers that dynamically generate code
\fIand\fR
subsequently overwrite part or all of it\&. Running with
\fIall\fR
will slow Valgrind down noticeably\&. Running with
\fInone\fR
will rarely speed things up, since very little code gets put on the stack for most programs\&. The
\fBVALGRIND_DISCARD_TRANSLATIONS\fR
client request is an alternative to
\fB\-\-smc\-check=all\fR
that requires more effort but is much faster\&.
.sp
Some architectures (including ppc32, ppc64 and ARM) require programs which create code at runtime to flush the instruction cache in between code generation and first use\&. Valgrind observes and honours such instructions\&. Hence, on ppc32/Linux, ppc64/Linux and ARM/Linux, Valgrind always provides complete, transparent support for self\-modifying code\&. It is only on platforms such as x86/Linux, AMD64/Linux and x86/Darwin that you need to use this option\&.
.RE
.PP
\fB\-\-read\-var\-info=<yes|no> [default: no] \fR
.RS 4
When enabled, Valgrind will read information about variable types and locations from DWARF3 debug info\&. This slows Valgrind down and makes it use more memory, but for the tools that can take advantage of it (Memcheck, Helgrind, DRD) it can result in more precise error messages\&. For example, here are some standard errors issued by Memcheck:
.sp
.if n \{\
.RS 4
.\}
.nf
==15516== Uninitialised byte(s) found during client check request
==15516==    at 0x400633: croak (varinfo1\&.c:28)
==15516==    by 0x4006B2: main (varinfo1\&.c:55)
==15516==  Address 0x60103b is 7 bytes inside data symbol "global_i2"
==15516== 
==15516== Uninitialised byte(s) found during client check request
==15516==    at 0x400633: croak (varinfo1\&.c:28)
==15516==    by 0x4006BC: main (varinfo1\&.c:56)
==15516==  Address 0x7fefffefc is on thread 1\*(Aqs stack
.fi
.if n \{\
.RE
.\}
.sp
And here are the same errors with
\fB\-\-read\-var\-info=yes\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
==15522== Uninitialised byte(s) found during client check request
==15522==    at 0x400633: croak (varinfo1\&.c:28)
==15522==    by 0x4006B2: main (varinfo1\&.c:55)
==15522==  Location 0x60103b is 0 bytes inside global_i2[7],
==15522==  a global variable declared at varinfo1\&.c:41
==15522== 
==15522== Uninitialised byte(s) found during client check request
==15522==    at 0x400633: croak (varinfo1\&.c:28)
==15522==    by 0x4006BC: main (varinfo1\&.c:56)
==15522==  Location 0x7fefffefc is 0 bytes inside local var "local"
==15522==  declared at varinfo1\&.c:46, in frame #1 of thread 1
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fB\-\-run\-libc\-freeres=<yes|no> [default: yes] \fR
.RS 4
This option is only relevant when running Valgrind on Linux\&.
.sp
The GNU C library (\fBlibc\&.so\fR), which is used by all programs, may allocate memory for its own uses\&. Usually it doesn\*(Aqt bother to free that memory when the program ends\(emthere would be no point, since the Linux kernel reclaims all process resources when a process exits anyway, so it would just slow things down\&.
.sp
The glibc authors realised that this behaviour causes leak checkers, such as Valgrind, to falsely report leaks in glibc, when a leak check is done at exit\&. In order to avoid this, they provided a routine called
\fB__libc_freeres\fR
specifically to make glibc release all memory it has allocated\&. Memcheck therefore tries to run
\fB__libc_freeres\fR
at exit\&.
.sp
Unfortunately, in some very old versions of glibc,
\fB__libc_freeres\fR
is sufficiently buggy to cause segmentation faults\&. This was particularly noticeable on Red Hat 7\&.1\&. So this option is provided in order to inhibit the run of
\fB__libc_freeres\fR\&. If your program seems to run fine on Valgrind, but segfaults at exit, you may find that
\fB\-\-run\-libc\-freeres=no\fR
fixes that, although at the cost of possibly falsely reporting space leaks in
libc\&.so\&.
.RE
.PP
\fB\-\-sim\-hints=hint1,hint2,\&.\&.\&. \fR
.RS 4
Pass miscellaneous hints to Valgrind which slightly modify the simulated behaviour in nonstandard or dangerous ways, possibly to help the simulation of strange features\&. By default no hints are enabled\&. Use with caution! Currently known hints are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBlax\-ioctls: \fR
Be very lax about ioctl handling; the only assumption is that the size is correct\&. Doesn\*(Aqt require the full buffer to be initialized when writing\&. Without this, using some device drivers with a large number of strange ioctl commands becomes very tiresome\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBenable\-inner: \fR
Enable some special magic needed when the program being run is itself Valgrind\&.
.RE
.RE
.PP
\fB\-\-kernel\-variant=variant1,variant2,\&.\&.\&.\fR
.RS 4
Handle system calls and ioctls arising from minor variants of the default kernel for this platform\&. This is useful for running on hacked kernels or with kernel modules which support nonstandard ioctls, for example\&. Use with caution\&. If you don\*(Aqt understand what this option does then you almost certainly don\*(Aqt need it\&. Currently known variants are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBbproc: \fR
Support the
\fBsys_broc\fR
system call on x86\&. This is for running on BProc, which is a minor variant of standard Linux which is sometimes used for building clusters\&.
.RE
.RE
.PP
\fB\-\-show\-emwarns=<yes|no> [default: no] \fR
.RS 4
When enabled, Valgrind will emit warnings about its CPU emulation in certain cases\&. These are usually not interesting\&.
.RE
.PP
\fB\-\-require\-text\-symbol=:sonamepatt:fnnamepatt\fR
.RS 4
When a shared object whose soname matches
\fIsonamepatt\fR
is loaded into the process, examine all the text symbols it exports\&. If none of those match
\fIfnnamepatt\fR, print an error message and abandon the run\&. This makes it possible to ensure that the run does not continue unless a given shared object contains a particular function name\&.
.sp
Both
\fIsonamepatt\fR
and
\fIfnnamepatt\fR
can be written using the usual
\fI?\fR
and
\fI*\fR
wildcards\&. For example:
\fI":*libc\&.so*:foo?bar"\fR\&. You may use characters other than a colon to separate the two patterns\&. It is only important that the first character and the separator character are the same\&. For example, the above example could also be written
\fI"Q*libc\&.so*Qfoo?bar"\fR\&. Multiple
\fI \-\-require\-text\-symbol\fR
flags are allowed, in which case shared objects that are loaded into the process will be checked against all of them\&.
.sp
The purpose of this is to support reliable usage of marked\-up libraries\&. For example, suppose we have a version of GCC\*(Aqs
\fIlibgomp\&.so\fR
which has been marked up with annotations to support Helgrind\&. It is only too easy and confusing to load the wrong, un\-annotated
\fIlibgomp\&.so\fR
into the application\&. So the idea is: add a text symbol in the marked\-up library, for example
\fIannotated_for_helgrind_3_6\fR, and then give the flag
\fI\-\-require\-text\-symbol=:*libgomp*so*:annotated_for_helgrind_3_6\fR
so that when
\fIlibgomp\&.so\fR
is loaded, Valgrind scans its symbol table, and if the symbol isn\*(Aqt present the run is aborted, rather than continuing silently with the un\-marked\-up library\&. Note that you should put the entire flag in quotes to stop shells expanding up the
\fI*\fR
and
\fI?\fR
wildcards\&.
.RE
.SH "DEBUGGING VALGRIND OPTIONS"
.PP
There are also some options for debugging Valgrind itself\&. You shouldn\*(Aqt need to use them in the normal run of things\&. If you wish to see the list, use the
\fB\-\-help\-debug\fR
option\&.
.SH "MEMCHECK OPTIONS"
.PP
\fB\-\-leak\-check=<no|summary|yes|full> [default: summary] \fR
.RS 4
When enabled, search for memory leaks when the client program finishes\&. If set to
\fIsummary\fR, it says how many leaks occurred\&. If set to
\fIfull\fR
or
\fIyes\fR, it also gives details of each individual leak\&.
.RE
.PP
\fB\-\-show\-possibly\-lost=<yes|no> [default: yes] \fR
.RS 4
When disabled, the memory leak detector will not show "possibly lost" blocks\&.
.RE
.PP
\fB\-\-leak\-resolution=<low|med|high> [default: high] \fR
.RS 4
When doing leak checking, determines how willing Memcheck is to consider different backtraces to be the same for the purposes of merging multiple leaks into a single leak report\&. When set to
\fIlow\fR, only the first two entries need match\&. When
\fImed\fR, four entries have to match\&. When
\fIhigh\fR, all entries need to match\&.
.sp
For hardcore leak debugging, you probably want to use
\fB\-\-leak\-resolution=high\fR
together with
\fB\-\-num\-callers=40\fR
or some such large number\&.
.sp
Note that the
\fB\-\-leak\-resolution\fR
setting does not affect Memcheck\*(Aqs ability to find leaks\&. It only changes how the results are presented\&.
.RE
.PP
\fB\-\-show\-reachable=<yes|no> [default: no] \fR
.RS 4
When disabled, the memory leak detector only shows "definitely lost" and "possibly lost" blocks\&. When enabled, the leak detector also shows "reachable" and "indirectly lost" blocks\&. (In other words, it shows all blocks, except suppressed ones, so
\fB\-\-show\-all\fR
would be a better name for it\&.)
.RE
.PP
\fB\-\-undef\-value\-errors=<yes|no> [default: yes] \fR
.RS 4
Controls whether Memcheck reports uses of undefined value errors\&. Set this to
\fIno\fR
if you don\*(Aqt want to see undefined value errors\&. It also has the side effect of speeding up Memcheck somewhat\&.
.RE
.PP
\fB\-\-track\-origins=<yes|no> [default: no] \fR
.RS 4
Controls whether Memcheck tracks the origin of uninitialised values\&. By default, it does not, which means that although it can tell you that an uninitialised value is being used in a dangerous way, it cannot tell you where the uninitialised value came from\&. This often makes it difficult to track down the root problem\&.
.sp
When set to
\fIyes\fR, Memcheck keeps track of the origins of all uninitialised values\&. Then, when an uninitialised value error is reported, Memcheck will try to show the origin of the value\&. An origin can be one of the following four places: a heap block, a stack allocation, a client request, or miscellaneous other sources (eg, a call to
\fIbrk\fR)\&.
.sp
For uninitialised values originating from a heap block, Memcheck shows where the block was allocated\&. For uninitialised values originating from a stack allocation, Memcheck can tell you which function allocated the value, but no more than that \-\- typically it shows you the source location of the opening brace of the function\&. So you should carefully check that all of the function\*(Aqs local variables are initialised properly\&.
.sp
Performance overhead: origin tracking is expensive\&. It halves Memcheck\*(Aqs speed and increases memory use by a minimum of 100MB, and possibly more\&. Nevertheless it can drastically reduce the effort required to identify the root cause of uninitialised value errors, and so is often a programmer productivity win, despite running more slowly\&.
.sp
Accuracy: Memcheck tracks origins quite accurately\&. To avoid very large space and time overheads, some approximations are made\&. It is possible, although unlikely, that Memcheck will report an incorrect origin, or not be able to identify any origin\&.
.sp
Note that the combination
\fB\-\-track\-origins=yes\fR
and
\fB\-\-undef\-value\-errors=no\fR
is nonsensical\&. Memcheck checks for and rejects this combination at startup\&.
.RE
.PP
\fB\-\-partial\-loads\-ok=<yes|no> [default: no] \fR
.RS 4
Controls how Memcheck handles word\-sized, word\-aligned loads from addresses for which some bytes are addressable and others are not\&. When
\fIyes\fR, such loads do not produce an address error\&. Instead, loaded bytes originating from illegal addresses are marked as uninitialised, and those corresponding to legal addresses are handled in the normal way\&.
.sp
When
\fIno\fR, loads from partially invalid addresses are treated the same as loads from completely invalid addresses: an illegal\-address error is issued, and the resulting bytes are marked as initialised\&.
.sp
Note that code that behaves in this way is in violation of the the ISO C/C++ standards, and should be considered broken\&. If at all possible, such code should be fixed\&. This option should be used only as a last resort\&.
.RE
.PP
\fB\-\-freelist\-vol=<number> [default: 20000000] \fR
.RS 4
When the client program releases memory using
\fBfree\fR
(in
C) or
delete
(C++), that memory is not immediately made available for re\-allocation\&. Instead, it is marked inaccessible and placed in a queue of freed blocks\&. The purpose is to defer as long as possible the point at which freed\-up memory comes back into circulation\&. This increases the chance that Memcheck will be able to detect invalid accesses to blocks for some significant period of time after they have been freed\&.
.sp
This option specifies the maximum total size, in bytes, of the blocks in the queue\&. The default value is twenty million bytes\&. Increasing this increases the total amount of memory used by Memcheck but may detect invalid uses of freed blocks which would otherwise go undetected\&.
.RE
.PP
\fB\-\-workaround\-gcc296\-bugs=<yes|no> [default: no] \fR
.RS 4
When enabled, assume that reads and writes some small distance below the stack pointer are due to bugs in GCC 2\&.96, and does not report them\&. The "small distance" is 256 bytes by default\&. Note that GCC 2\&.96 is the default compiler on some ancient Linux distributions (RedHat 7\&.X) and so you may need to use this option\&. Do not use it if you do not have to, as it can cause real errors to be overlooked\&. A better alternative is to use a more recent GCC in which this bug is fixed\&.
.sp
You may also need to use this option when working with GCC 3\&.X or 4\&.X on 32\-bit PowerPC Linux\&. This is because GCC generates code which occasionally accesses below the stack pointer, particularly for floating\-point to/from integer conversions\&. This is in violation of the 32\-bit PowerPC ELF specification, which makes no provision for locations below the stack pointer to be accessible\&.
.RE
.PP
\fB\-\-ignore\-ranges=0xPP\-0xQQ[,0xRR\-0xSS] \fR
.RS 4
Any ranges listed in this option (and multiple ranges can be specified, separated by commas) will be ignored by Memcheck\*(Aqs addressability checking\&.
.RE
.PP
\fB\-\-malloc\-fill=<hexnumber> \fR
.RS 4
Fills blocks allocated by
malloc,
new, etc, but not by
calloc, with the specified byte\&. This can be useful when trying to shake out obscure memory corruption problems\&. The allocated area is still regarded by Memcheck as undefined \-\- this option only affects its contents\&.
.RE
.PP
\fB\-\-free\-fill=<hexnumber> \fR
.RS 4
Fills blocks freed by
free,
delete, etc, with the specified byte value\&. This can be useful when trying to shake out obscure memory corruption problems\&. The freed area is still regarded by Memcheck as not valid for access \-\- this option only affects its contents\&.
.RE
.SH "CACHEGRIND OPTIONS"
.PP
\fB\-\-I1=<size>,<associativity>,<line size> \fR
.RS 4
Specify the size, associativity and line size of the level 1 instruction cache\&.
.RE
.PP
\fB\-\-D1=<size>,<associativity>,<line size> \fR
.RS 4
Specify the size, associativity and line size of the level 1 data cache\&.
.RE
.PP
\fB\-\-LL=<size>,<associativity>,<line size> \fR
.RS 4
Specify the size, associativity and line size of the last\-level cache\&.
.RE
.PP
\fB\-\-cache\-sim=no|yes [yes] \fR
.RS 4
Enables or disables collection of cache access and miss counts\&.
.RE
.PP
\fB\-\-branch\-sim=no|yes [no] \fR
.RS 4
Enables or disables collection of branch instruction and misprediction counts\&. By default this is disabled as it slows Cachegrind down by approximately 25%\&. Note that you cannot specify
\fB\-\-cache\-sim=no\fR
and
\fB\-\-branch\-sim=no\fR
together, as that would leave Cachegrind with no information to collect\&.
.RE
.PP
\fB\-\-cachegrind\-out\-file=<file> \fR
.RS 4
Write the profile data to
file
rather than to the default output file,
cachegrind\&.out\&.<pid>\&. The
\fB%p\fR
and
\fB%q\fR
format specifiers can be used to embed the process ID and/or the contents of an environment variable in the name, as is the case for the core option
\fB--log-file\fR\&.
.RE
.SH "CALLGRIND OPTIONS"
.PP
\fB\-\-callgrind\-out\-file=<file> \fR
.RS 4
Write the profile data to
file
rather than to the default output file,
callgrind\&.out\&.<pid>\&. The
\fB%p\fR
and
\fB%q\fR
format specifiers can be used to embed the process ID and/or the contents of an environment variable in the name, as is the case for the core option
\fB--log-file\fR\&. When multiple dumps are made, the file name is modified further; see below\&.
.RE
.PP
\fB\-\-dump\-line=<no|yes> [default: yes] \fR
.RS 4
This specifies that event counting should be performed at source line granularity\&. This allows source annotation for sources which are compiled with debug information (\fB\-g\fR)\&.
.RE
.PP
\fB\-\-dump\-instr=<no|yes> [default: no] \fR
.RS 4
This specifies that event counting should be performed at per\-instruction granularity\&. This allows for assembly code annotation\&. Currently the results can only be displayed by KCachegrind\&.
.RE
.PP
\fB\-\-compress\-strings=<no|yes> [default: yes] \fR
.RS 4
This option influences the output format of the profile data\&. It specifies whether strings (file and function names) should be identified by numbers\&. This shrinks the file, but makes it more difficult for humans to read (which is not recommended in any case)\&.
.RE
.PP
\fB\-\-compress\-pos=<no|yes> [default: yes] \fR
.RS 4
This option influences the output format of the profile data\&. It specifies whether numerical positions are always specified as absolute values or are allowed to be relative to previous numbers\&. This shrinks the file size\&.
.RE
.PP
\fB\-\-combine\-dumps=<no|yes> [default: no] \fR
.RS 4
When enabled, when multiple profile data parts are to be generated these parts are appended to the same output file\&. Not recommended\&.
.RE
.PP
\fB\-\-dump\-every\-bb=<count> [default: 0, never] \fR
.RS 4
Dump profile data every
\fBcount\fR
basic blocks\&. Whether a dump is needed is only checked when Valgrind\*(Aqs internal scheduler is run\&. Therefore, the minimum setting useful is about 100000\&. The count is a 64\-bit value to make long dump periods possible\&.
.RE
.PP
\fB\-\-dump\-before=<function> \fR
.RS 4
Dump when entering
\fBfunction\fR\&.
.RE
.PP
\fB\-\-zero\-before=<function> \fR
.RS 4
Zero all costs when entering
\fBfunction\fR\&.
.RE
.PP
\fB\-\-dump\-after=<function> \fR
.RS 4
Dump when leaving
\fBfunction\fR\&.
.RE
.PP
\fB\-\-instr\-atstart=<yes|no> [default: yes] \fR
.RS 4
Specify if you want Callgrind to start simulation and profiling from the beginning of the program\&. When set to
no, Callgrind will not be able to collect any information, including calls, but it will have at most a slowdown of around 4, which is the minimum Valgrind overhead\&. Instrumentation can be interactively enabled via
callgrind_control \-i on\&.
.sp
Note that the resulting call graph will most probably not contain
\fBmain\fR, but will contain all the functions executed after instrumentation was enabled\&. Instrumentation can also programatically enabled/disabled\&. See the Callgrind include file
callgrind\&.h
for the macro you have to use in your source code\&.
.sp
For cache simulation, results will be less accurate when switching on instrumentation later in the program run, as the simulator starts with an empty cache at that moment\&. Switch on event collection later to cope with this error\&.
.RE
.PP
\fB\-\-collect\-atstart=<yes|no> [default: yes] \fR
.RS 4
Specify whether event collection is enabled at beginning of the profile run\&.
.sp
To only look at parts of your program, you have two possibilities:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Zero event counters before entering the program part you want to profile, and dump the event counters to a file after leaving that program part\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Switch on/off collection state as needed to only see event counters happening while inside of the program part you want to profile\&.
.RE
.sp
The second option can be used if the program part you want to profile is called many times\&. Option 1, i\&.e\&. creating a lot of dumps is not practical here\&.
.sp
Collection state can be toggled at entry and exit of a given function with the option
\fB--toggle-collect\fR\&. If you use this option, collection state should be disabled at the beginning\&. Note that the specification of
\fB\-\-toggle\-collect\fR
implicitly sets
\fB\-\-collect\-state=no\fR\&.
.sp
Collection state can be toggled also by inserting the client request
CALLGRIND_TOGGLE_COLLECT ;
at the needed code positions\&.
.RE
.PP
\fB\-\-toggle\-collect=<function> \fR
.RS 4
Toggle collection on entry/exit of
\fBfunction\fR\&.
.RE
.PP
\fB\-\-collect\-jumps=<no|yes> [default: no] \fR
.RS 4
This specifies whether information for (conditional) jumps should be collected\&. As above, callgrind_annotate currently is not able to show you the data\&. You have to use KCachegrind to get jump arrows in the annotated code\&.
.RE
.PP
\fB\-\-collect\-systime=<no|yes> [default: no] \fR
.RS 4
This specifies whether information for system call times should be collected\&.
.RE
.PP
\fB\-\-collect\-bus=<no|yes> [default: no] \fR
.RS 4
This specifies whether the number of global bus events executed should be collected\&. The event type "Ge" is used for these events\&.
.RE
.PP
\fB\-\-cache\-sim=<yes|no> [default: no] \fR
.RS 4
Specify if you want to do full cache simulation\&. By default, only instruction read accesses will be counted ("Ir")\&. With cache simulation, further event counters are enabled: Cache misses on instruction reads ("I1mr"/"ILmr"), data read accesses ("Dr") and related cache misses ("D1mr"/"DLmr"), data write accesses ("Dw") and related cache misses ("D1mw"/"DLmw")\&. For more information, see
???\&.
.RE
.PP
\fB\-\-branch\-sim=<yes|no> [default: no] \fR
.RS 4
Specify if you want to do branch prediction simulation\&. Further event counters are enabled: Number of executed conditional branches and related predictor misses ("Bc"/"Bcm"), executed indirect jumps and related misses of the jump address predictor ("Bi"/"Bim")\&.
.RE
.SH "HELGRIND OPTIONS"
.PP
\fB\-\-track\-lockorders=no|yes [default: yes] \fR
.RS 4
When enabled (the default), Helgrind performs lock order consistency checking\&. For some buggy programs, the large number of lock order errors reported can become annoying, particularly if you\*(Aqre only interested in race errors\&. You may therefore find it helpful to disable lock order checking\&.
.RE
.PP
\fB\-\-history\-level=none|approx|full [default: full] \fR
.RS 4
\fB\-\-history\-level=full\fR
(the default) causes Helgrind collects enough information about "old" accesses that it can produce two stack traces in a race report \-\- both the stack trace for the current access, and the trace for the older, conflicting access\&.
.sp
Collecting such information is expensive in both speed and memory, particularly for programs that do many inter\-thread synchronisation events (locks, unlocks, etc)\&. Without such information, it is more difficult to track down the root causes of races\&. Nonetheless, you may not need it in situations where you just want to check for the presence or absence of races, for example, when doing regression testing of a previously race\-free program\&.
.sp
\fB\-\-history\-level=none\fR
is the opposite extreme\&. It causes Helgrind not to collect any information about previous accesses\&. This can be dramatically faster than
\fB\-\-history\-level=full\fR\&.
.sp
\fB\-\-history\-level=approx\fR
provides a compromise between these two extremes\&. It causes Helgrind to show a full trace for the later access, and approximate information regarding the earlier access\&. This approximate information consists of two stacks, and the earlier access is guaranteed to have occurred somewhere between program points denoted by the two stacks\&. This is not as useful as showing the exact stack for the previous access (as
\fB\-\-history\-level=full\fR
does), but it is better than nothing, and it is almost as fast as
\fB\-\-history\-level=none\fR\&.
.RE
.PP
\fB\-\-conflict\-cache\-size=N [default: 1000000] \fR
.RS 4
This flag only has any effect at
\fB\-\-history\-level=full\fR\&.
.sp
Information about "old" conflicting accesses is stored in a cache of limited size, with LRU\-style management\&. This is necessary because it isn\*(Aqt practical to store a stack trace for every single memory access made by the program\&. Historical information on not recently accessed locations is periodically discarded, to free up space in the cache\&.
.sp
This option controls the size of the cache, in terms of the number of different memory addresses for which conflicting access information is stored\&. If you find that Helgrind is showing race errors with only one stack instead of the expected two stacks, try increasing this value\&.
.sp
The minimum value is 10,000 and the maximum is 30,000,000 (thirty times the default value)\&. Increasing the value by 1 increases Helgrind\*(Aqs memory requirement by very roughly 100 bytes, so the maximum value will easily eat up three extra gigabytes or so of memory\&.
.RE
.SH "DRD OPTIONS"
.PP
\fB\-\-check\-stack\-var=<yes|no> [default: no]\fR
.RS 4
Controls whether DRD detects data races on stack variables\&. Verifying stack variables is disabled by default because most programs do not share stack variables over threads\&.
.RE
.PP
\fB\-\-exclusive\-threshold=<n> [default: off]\fR
.RS 4
Print an error message if any mutex or writer lock has been held longer than the time specified in milliseconds\&. This option enables the detection of lock contention\&.
.RE
.PP
\fB \-\-first\-race\-only=<yes|no> [default: no] \fR
.RS 4
Whether to report only the first data race that has been detected on a memory location or all data races that have been detected on a memory location\&.
.RE
.PP
\fB \-\-free\-is\-write=<yes|no> [default: no] \fR
.RS 4
Whether to report accessing freed memory as a race\&. Helps to detect memory accesses that occur after memory has been freed but might cause DRD to run slightly slower\&.
.RE
.PP
\fB \-\-report\-signal\-unlocked=<yes|no> [default: yes] \fR
.RS 4
Whether to report calls to
\fBpthread_cond_signal\fR
and
\fBpthread_cond_broadcast\fR
where the mutex associated with the signal through
\fBpthread_cond_wait\fR
or
\fBpthread_cond_timed_wait\fRis not locked at the time the signal is sent\&. Sending a signal without holding a lock on the associated mutex is a common programming error which can cause subtle race conditions and unpredictable behavior\&. There exist some uncommon synchronization patterns however where it is safe to send a signal without holding a lock on the associated mutex\&.
.RE
.PP
\fB\-\-segment\-merging=<yes|no> [default: yes]\fR
.RS 4
Controls segment merging\&. Segment merging is an algorithm to limit memory usage of the data race detection algorithm\&. Disabling segment merging may improve the accuracy of the so\-called \*(Aqother segments\*(Aq displayed in race reports but can also trigger an out of memory error\&.
.RE
.PP
\fB\-\-segment\-merging\-interval=<n> [default: 10]\fR
.RS 4
Perform segment merging only after the specified number of new segments have been created\&. This is an advanced configuration option that allows to choose whether to minimize DRD\*(Aqs memory usage by choosing a low value or to let DRD run faster by choosing a slightly higher value\&. The optimal value for this parameter depends on the program being analyzed\&. The default value works well for most programs\&.
.RE
.PP
\fB\-\-shared\-threshold=<n> [default: off]\fR
.RS 4
Print an error message if a reader lock has been held longer than the specified time (in milliseconds)\&. This option enables the detection of lock contention\&.
.RE
.PP
\fB\-\-show\-confl\-seg=<yes|no> [default: yes]\fR
.RS 4
Show conflicting segments in race reports\&. Since this information can help to find the cause of a data race, this option is enabled by default\&. Disabling this option makes the output of DRD more compact\&.
.RE
.PP
\fB\-\-show\-stack\-usage=<yes|no> [default: no]\fR
.RS 4
Print stack usage at thread exit time\&. When a program creates a large number of threads it becomes important to limit the amount of virtual memory allocated for thread stacks\&. This option makes it possible to observe how much stack memory has been used by each thread of the the client program\&. Note: the DRD tool itself allocates some temporary data on the client thread stack\&. The space necessary for this temporary data must be allocated by the client program when it allocates stack memory, but is not included in stack usage reported by DRD\&.
.RE
.PP
\fB\-\-trace\-addr=<address> [default: none]\fR
.RS 4
Trace all load and store activity for the specified address\&. This option may be specified more than once\&.
.RE
.PP
\fB\-\-trace\-alloc=<yes|no> [default: no]\fR
.RS 4
Trace all memory allocations and deallocations\&. May produce a huge amount of output\&.
.RE
.PP
\fB\-\-trace\-barrier=<yes|no> [default: no]\fR
.RS 4
Trace all barrier activity\&.
.RE
.PP
\fB\-\-trace\-cond=<yes|no> [default: no]\fR
.RS 4
Trace all condition variable activity\&.
.RE
.PP
\fB\-\-trace\-fork\-join=<yes|no> [default: no]\fR
.RS 4
Trace all thread creation and all thread termination events\&.
.RE
.PP
\fB\-\-trace\-mutex=<yes|no> [default: no]\fR
.RS 4
Trace all mutex activity\&.
.RE
.PP
\fB\-\-trace\-rwlock=<yes|no> [default: no]\fR
.RS 4
Trace all reader\-writer lock activity\&.
.RE
.PP
\fB\-\-trace\-semaphore=<yes|no> [default: no]\fR
.RS 4
Trace all semaphore activity\&.
.RE
.SH "MASSIF OPTIONS"
.PP
\fB\-\-heap=<yes|no> [default: yes] \fR
.RS 4
Specifies whether heap profiling should be done\&.
.RE
.PP
\fB\-\-heap\-admin=<size> [default: 8] \fR
.RS 4
If heap profiling is enabled, gives the number of administrative bytes per block to use\&. This should be an estimate of the average, since it may vary\&. For example, the allocator used by glibc on Linux requires somewhere between 4 to 15 bytes per block, depending on various factors\&. That allocator also requires admin space for freed blocks, but Massif cannot account for this\&.
.RE
.PP
\fB\-\-stacks=<yes|no> [default: no] \fR
.RS 4
Specifies whether stack profiling should be done\&. This option slows Massif down greatly, and so is off by default\&. Note that Massif assumes that the main stack has size zero at start\-up\&. This is not true, but doing otherwise accurately is difficult\&. Furthermore, starting at zero better indicates the size of the part of the main stack that a user program actually has control over\&.
.RE
.PP
\fB\-\-pages\-as\-heap=<yes|no> [default: no] \fR
.RS 4
Tells Massif to profile memory at the page level rather than at the malloc\*(Aqd block level\&. See above for details\&.
.RE
.PP
\fB\-\-depth=<number> [default: 30] \fR
.RS 4
Maximum depth of the allocation trees recorded for detailed snapshots\&. Increasing it will make Massif run somewhat more slowly, use more memory, and produce bigger output files\&.
.RE
.PP
\fB\-\-alloc\-fn=<name> \fR
.RS 4
Functions specified with this option will be treated as though they were a heap allocation function such as
\fBmalloc\fR\&. This is useful for functions that are wrappers to
\fBmalloc\fR
or
\fBnew\fR, which can fill up the allocation trees with uninteresting information\&. This option can be specified multiple times on the command line, to name multiple functions\&.
.sp
Note that the named function will only be treated this way if it is the top entry in a stack trace, or just below another function treated this way\&. For example, if you have a function
\fBmalloc1\fR
that wraps
\fBmalloc\fR, and
\fBmalloc2\fR
that wraps
\fBmalloc1\fR, just specifying
\fB\-\-alloc\-fn=malloc2\fR
will have no effect\&. You need to specify
\fB\-\-alloc\-fn=malloc1\fR
as well\&. This is a little inconvenient, but the reason is that checking for allocation functions is slow, and it saves a lot of time if Massif can stop looking through the stack trace entries as soon as it finds one that doesn\*(Aqt match rather than having to continue through all the entries\&.
.sp
Note that C++ names are demangled\&. Note also that overloaded C++ names must be written in full\&. Single quotes may be necessary to prevent the shell from breaking them up\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-alloc\-fn=\*(Aqoperator new(unsigned, std::nothrow_t const&)\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fB\-\-ignore\-fn=<name> \fR
.RS 4
Any direct heap allocation (i\&.e\&. a call to
\fBmalloc\fR,
\fBnew\fR, etc, or a call to a function named by an
\fB\-\-alloc\-fn\fR
option) that occurs in a function specified by this option will be ignored\&. This is mostly useful for testing purposes\&. This option can be specified multiple times on the command line, to name multiple functions\&.
.sp
Any
\fBrealloc\fR
of an ignored block will also be ignored, even if the
\fBrealloc\fR
call does not occur in an ignored function\&. This avoids the possibility of negative heap sizes if ignored blocks are shrunk with
\fBrealloc\fR\&.
.sp
The rules for writing C++ function names are the same as for
\fB\-\-alloc\-fn\fR
above\&.
.RE
.PP
\fB\-\-threshold=<m\&.n> [default: 1\&.0] \fR
.RS 4
The significance threshold for heap allocations, as a percentage of total memory size\&. Allocation tree entries that account for less than this will be aggregated\&. Note that this should be specified in tandem with ms_print\*(Aqs option of the same name\&.
.RE
.PP
\fB\-\-peak\-inaccuracy=<m\&.n> [default: 1\&.0] \fR
.RS 4
Massif does not necessarily record the actual global memory allocation peak; by default it records a peak only when the global memory allocation size exceeds the previous peak by at least 1\&.0%\&. This is because there can be many local allocation peaks along the way, and doing a detailed snapshot for every one would be expensive and wasteful, as all but one of them will be later discarded\&. This inaccuracy can be changed (even to 0\&.0%) via this option, but Massif will run drastically slower as the number approaches zero\&.
.RE
.PP
\fB\-\-time\-unit=<i|ms|B> [default: i] \fR
.RS 4
The time unit used for the profiling\&. There are three possibilities: instructions executed (i), which is good for most cases; real (wallclock) time (ms, i\&.e\&. milliseconds), which is sometimes useful; and bytes allocated/deallocated on the heap and/or stack (B), which is useful for very short\-run programs, and for testing purposes, because it is the most reproducible across different machines\&.
.RE
.PP
\fB\-\-detailed\-freq=<n> [default: 10] \fR
.RS 4
Frequency of detailed snapshots\&. With
\fB\-\-detailed\-freq=1\fR, every snapshot is detailed\&.
.RE
.PP
\fB\-\-max\-snapshots=<n> [default: 100] \fR
.RS 4
The maximum number of snapshots recorded\&. If set to N, for all programs except very short\-running ones, the final number of snapshots will be between N/2 and N\&.
.RE
.PP
\fB\-\-massif\-out\-file=<file> [default: massif\&.out\&.%p] \fR
.RS 4
Write the profile data to
file
rather than to the default output file,
massif\&.out\&.<pid>\&. The
\fB%p\fR
and
\fB%q\fR
format specifiers can be used to embed the process ID and/or the contents of an environment variable in the name, as is the case for the core option
\fB--log-file\fR\&.
.RE
.SH "PTRCHECK OPTIONS"
.PP
\fB\-\-enable\-sg\-checks=no|yes [default: yes] \fR
.RS 4
By default, Ptrcheck checks for overruns of stack, global and heap arrays\&. With
\fI\-\-enable\-sg\-checks=no\fR, the stack and global array checks are omitted, and only heap checking is performed\&. This can be useful because the stack and global checks are quite expensive, so omitting them speeds Ptrcheck up a lot\&.
.RE
.PP
\fB\-\-partial\-loads\-ok=<yes|no> [default: no] \fR
.RS 4
This option has the same meaning as it does for Memcheck\&.
.sp
Controls how Ptrcheck handles word\-sized, word\-aligned loads which partially overlap the end of heap blocks \-\- that is, some of the bytes in the word are validly addressable, but others are not\&. When
\fIyes\fR, such loads do not produce an address error\&. When
\fIno\fR
(the default), loads from partially invalid addresses are treated the same as loads from completely invalid addresses: an illegal heap access error is issued\&.
.sp
Note that code that behaves in this way is in violation of the the ISO C/C++ standards, and should be considered broken\&. If at all possible, such code should be fixed\&. This option should be used only as a last resort\&.
.RE
.SH "BBV OPTIONS"
.PP
\fB\-\-bb\-out\-file=<name> [default: bb\&.out\&.%p] \fR
.RS 4
This option selects the name of the basic block vector file\&. The
\fB%p\fR
and
\fB%q\fR
format specifiers can be used to embed the process ID and/or the contents of an environment variable in the name, as is the case for the core option
\fB--log-file\fR\&.
.RE
.PP
\fB\-\-pc\-out\-file=<name> [default: pc\&.out\&.%p] \fR
.RS 4
This option selects the name of the PC file\&. This file holds program counter addresses and function name info for the various basic blocks\&. This can be used in conjunction with the basic block vector file to fast\-forward via function names instead of just instruction counts\&. The
\fB%p\fR
and
\fB%q\fR
format specifiers can be used to embed the process ID and/or the contents of an environment variable in the name, as is the case for the core option
\fB--log-file\fR\&.
.RE
.PP
\fB\-\-interval\-size=<number> [default: 100000000] \fR
.RS 4
This option selects the size of the interval to use\&. The default is 100 million instructions, which is a commonly used value\&. Other sizes can be used; smaller intervals can help programs with finer\-grained phases\&. However smaller interval size can lead to accuracy issues due to warm\-up effects (When fast\-forwarding the various architectural features will be un\-initialized, and it will take some number of instructions before they "warm up" to the state a full simulation would be at without the fast\-forwarding\&. Large interval sizes tend to mitigate this\&.)
.RE
.PP
\fB\-\-instr\-count\-only [default: no] \fR
.RS 4
This option tells the tool to only display instruction count totals, and to not generate the actual basic block vector file\&. This is useful for debugging, and for gathering instruction count info without generating the large basic block vector files\&.
.RE
.SH "LACKEY OPTIONS"
.PP
\fB\-\-basic\-counts=<no|yes> [default: yes] \fR
.RS 4
When enabled, Lackey prints the following statistics and information about the execution of the client program:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
The number of calls to the function specified by the
\fB\-\-fnname\fR
option (the default is
main)\&. If the program has had its symbols stripped, the count will always be zero\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
The number of conditional branches encountered and the number and proportion of those taken\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
The number of superblocks entered and completed by the program\&. Note that due to optimisations done by the JIT, this is not at all an accurate value\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
The number of guest (x86, amd64, ppc, etc\&.) instructions and IR statements executed\&. IR is Valgrind\*(Aqs RISC\-like intermediate representation via which all instrumentation is done\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Ratios between some of these counts\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
The exit code of the client program\&.
.RE
.RE
.PP
\fB\-\-detailed\-counts=<no|yes> [default: no] \fR
.RS 4
When enabled, Lackey prints a table containing counts of loads, stores and ALU operations, differentiated by their IR types\&. The IR types are identified by their IR name ("I1", "I8", \&.\&.\&. "I128", "F32", "F64", and "V128")\&.
.RE
.PP
\fB\-\-trace\-mem=<no|yes> [default: no] \fR
.RS 4
When enabled, Lackey prints the size and address of almost every memory access made by the program\&. See the comments at the top of the file
lackey/lk_main\&.c
for details about the output format, how it works, and inaccuracies in the address trace\&. Note that this option produces immense amounts of output\&.
.RE
.PP
\fB\-\-trace\-superblocks=<no|yes> [default: no] \fR
.RS 4
When enabled, Lackey prints out the address of every superblock (a single entry, multiple exit, linear chunk of code) executed by the program\&. This is primarily of interest to Valgrind developers\&. See the comments at the top of the file
lackey/lk_main\&.c
for details about the output format\&. Note that this option produces large amounts of output\&.
.RE
.PP
\fB\-\-fnname=<name> [default: main] \fR
.RS 4
Changes the function for which calls are counted when
\fB\-\-basic\-counts=yes\fR
is specified\&.
.RE
.SH "SEE ALSO"
.PP
cg_annotate(1), callgrind_annotate(1), callgrind_control(1), ms_print(1),
$INSTALL/share/doc/valgrind/html/index\&.html
or
http://www\&.valgrind\&.org/docs/manual/index\&.html\&.
.SH "AUTHOR"
.PP
The Valgrind developers\&.
.PP
This manpage was written by Andres Roldan <aroldan@debian\&.org> and the Valgrind developers\&.
